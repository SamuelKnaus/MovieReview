openapi: 3.0.3
info:
  title: Movie Review OpenAPI documentation
  description: Documentation of the movie review resources
  version: 0.0.1

paths:
  /users/:
    get:
      description: Get the list of manage users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
              - username: test-user-1
                email_address: test-user-1@oulu.fi
                password: 1e234d
                role: BasicUser
              - username: test-user-2
                email_address: test-user-2@oulu.fi
                password: 544f8
                role: Admin
    post:
      description: Create a new user
      responses:
        '201':
          description: The user was created successfully
          headers:
            Location:
              description: URI of the new user
              schema:
                type: string
        '400':
          description: username, email_address, password must be string and role must be BasicUser or Admin
        '409':
          description: User already exists
        '415':
          description: Request content type must be JSON
      requestBody:
        description: JSON document that contains basic data for a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: new-test-user-1
              email_address: new-test-user-1@oulu.fi
              password: e19h63
              role: BasicUser

  /users/{username}/:
    parameters:
    - $ref: '#/components/parameters/username'
    get:
      description: Get details of one user
      responses:
        '200':
          description: Data of single user
          content:
            application/json:
              examples:
                user-example:
                  description: A user that has been created
                  value:
                    username: test-user-1
                    email_address: test-user-1@oulu.fi
                    password: 1e234d
                    role: BasicUser

        '404':
          description: The user was not found
    put:
      description: Update a user by username
      responses:
        '204':
          description: The user has been deleted
        '404':
          description: The user was not found

    delete:
      description: Delete a user by username
      responses:
        '204':
          description: The user has been deleted
        '404':
          description: The user was not found
  /users/{username}/reviews/:
    parameters:
    - $ref: '#/components/parameters/username'
    get:
      description: Get the list of a user's reviews by username
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              example:
              - rating: 3
                comment: The movie is ok
                date: 20210322
              - rating: 5
                comment: The movie is great
                date: 20210323

  /movies/:
    get:
      description: Get the list of manage movies
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              example:
              - title: test-movie-1
                length: 172
              - title: test-movie-2
                director: Nolan
                length: 168
                release_date: 20180627
    post:
      description: Create a new movie
      responses:
        '201':
          description: The movie was created successfully
          headers:
            Location:
              description: URI of the new movie
              schema:
                type: string
        '400':
          description: title, director must be string, length must be a number and releas_date must be a number with YYYYMMDD format
        '409':
          description: Movie already exists
        '415':
          description: Request content type must be JSON
      requestBody:
        description: JSON document that contains basic data for a new movie
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            example:
              title: new-test-user-1
              director: villeneuve
  /movies/{title}/:
    parameters:
    - $ref: '#/components/parameters/movie_title'
    get:
      description: Get details of one movie
      responses:
        '200':
          description: Data of single movie
          content:
            application/json:
              examples:
                movie-example:
                  description: A movie that has been created
                  value:
                    title: test-movie-1
                    length: 172

        '404':
          description: The movie was not found
    put:
      description: Update a movie by title
      responses:
        '204':
          description: The movie has been deleted
        '404':
          description: The movie was not found

    delete:
      description: Delete a movie by title
      responses:
        '204':
          description: The movie has been deleted
        '404':
          description: The movie was not found
  /movies/{title}/reviews/:
    parameters:
    - $ref: '#/components/parameters/movie_title'
    get:
      description: Get the list of a movie's reviews by movie title
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              example:
              - rating: 3
                comment: The movie is ok
                date: 20210322
              - rating: 5
                comment: The movie is great
                date: 20210323
  /movies/{title}/reviews/{comment}:
    parameters:
    - $ref: '#/components/parameters/movie_title'
    - $ref: '#/components/parameters/review_comment'
    get:
      description: Get details of one review
      responses:
        '200':
          description: Data of single review
          content:
            application/json:
              examples:
                user-example:
                  description: A review that has been created
                  value:
                    rating: 3
                    comment: The movie is ok
                    date: 20210322

        '404':
          description: The review was not found
    put:
      description: Update a review by comment
      responses:
        '204':
          description: The review has been deleted
        '404':
          description: The review was not found

    delete:
      description: Delete a review by comment
      responses:
        '204':
          description: The review has been deleted
        '404':
          description: The review was not found

  /categories/:
    get:
      description: Get the list of manage categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              example:
              - title: test-category-1
              - title: test-category-2
    post:
      description: Create a new category
      responses:
        '201':
          description: The category was created successfully
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: title must be string
        '409':
          description: Category already exists
        '415':
          description: Request content type must be JSON
      requestBody:
        description: JSON document that contains basic data for a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            example:
              title: new-test-category-1
  /categories/{title}/:
    parameters:
    - $ref: '#/components/parameters/category_title'
    get:
      description: Get details of one category
      responses:
        '200':
          description: Data of single category
          content:
            application/json:
              examples:
                category-example:
                  description: A category that has been created
                  value:
                    title: test-category-1

        '404':
          description: The category was not found
    put:
      description: Update a category by title
      responses:
        '204':
          description: The category has been deleted
        '404':
          description: The category was not found

    delete:
      description: Delete a category by title
      responses:
        '204':
          description: The category has been deleted
        '404':
          description: The category was not found




components:
  schemas:
    User:
      type: object
      properties:
        username:
          description: User's unique username
          type: string
        email_address:
          description: User's unique email_address
          type: string
        password:
          description: User's password
          type: string
        role:
          description: User's role
          enum: ["BasicUser", "Admin"]
      required:
      - username
      - email_address
      - password
      - role

    Review:
      type: object
      properties:
        rating:
          description: Review's rating (between 1 and 5)
          type: number
        comment:
          description: Review's unique comment
          type: string
        date:
          description: Review's date as YYYYMMDD format
          type: number
      required:
      - rating
      - comment
      - date

    Movie:
      type: object
      properties:
        title:
          description: Movie's unique title
          type: string
        director:
          description: Movie's director
          type: string
        length:
          description: Movie's length
          type: number
        release_date:
          description: Movie's release date as YYYYMMDD format
          type: number

      required:
      - title
    Category:
      type: object
      properties:
        title:
          description: Category's title
          type: string
      required:
      - title

  parameters:
    username:
      description: Selected user's unique username
      in: path
      name: username
      required: true
      schema:
        type: string
    movie_title:
      description: Selected movie's unique title
      in: path
      name: title
      required: true
      schema:
        type: string
    review_comment:
      description: Selected review's unique comment
      in: path
      name: comment
      required: true
      schema:
        type: string
    category_title:
      description: Selected category's unique title
      in: path
      name: title
      required: true
      schema:
        type: string
