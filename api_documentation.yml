openapi: 3.0.3
info:
  title: Movie Review OpenAPI documentation
  description: Documentation of the movie review resources
  version: 0.0.1

paths:
  /users/:
    get:
      tags:
      - "users"
      description: Fetch the list of users from the system.
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
              - id: 12054
                username: test-user-1
                email_address: test-user-1@oulu.fi
                role: Basic User
              - id: 12055
                username: test-user-2
                email_address: test-user-2@oulu.fi
                role: Admin
    post:
      tags:
      - "users"
      description: Create a new user
      responses:
        '201':
          description: The user was created successfully.
        '400':
          description: Request doesn't match the JSON schema. For example username, email_address, password must be string and role must be enum of UserType ('Basic User' or 'Admin').
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
      requestBody:
        description: JSON document that contains the username, email, password, and role to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: new-test-user-1
              email_address: new-test-user-1@oulu.fi
              password: e19h63
              role: Basic User

  /users/{user_id}/:
    parameters:
    - $ref: '#/components/parameters/user_id'
    get:
      tags:
      - "users"
      description: Fetch data from a certain user by using the ID.
      responses:
        '200':
          description: Data fron a single user.
          content:
            application/json:
              examples:
                user-example:
                  description: Examplary data of a single user entry.
                  value:
                    id: 12054
                    username: test-user-1
                    email_address: test-user-1@oulu.fi
                    role: BasicUser

        '404':
          description: There exists no user with the provided ID.
    put:
      tags:
      - "users"
      description: Update a user by his ID.
      responses:
        '204':
          description: The user has been updated.
        '404':
          description: The user/endpoint was not found.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
      requestBody:
        description: JSON document that contains either username, email, password, or all of them to update user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: updated-test-user-1
              email_address: updated-test-user-1@oulu.fi
              password: e19h63123
              role: Admin

    delete:
      tags:
      - "users"
      description: Delete a user by his ID.
      responses:
        '204':
          description: The user has been deleted.
        '404':
          description: The user/endpoint was not found.

  /movies/:
    get:
      tags:
      - "movies"
      description: Fetch the list of movies from the system.
      responses:
        '200':
          description: List of movies.
          content:
            application/json:
              example:
              - id: 1
                title: test-movie-1
                director: Luc Besson
                length: 110
                release_date: 1999-09-14
                category_id: 2
              - id: 2
                title: test-movie-2
                director: Jon Watts
                length: 148
                release_date: 2021-12-13
                category_id: 3
    post:
      tags:
      - "movies"
      description: Create a new movie.
      responses:
        '201':
          description: The movie was created successfully.
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '409':
          description: Restrictions from the database e.g, foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be JSON.
      requestBody:
        description: JSON document that contains the data for creating a new movie
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            example:
              title: new-test-movie-1
              director: villeneuve
              length: 660
              release_date: "1999-03-24"
              category_id: 1
  /movies/{movie_id}/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "movies"
      description: Featch data from single movie by the ID.
      responses:
        '200':
          description: Data of a single movie.
          content:
            application/json:
              example:
                description: A movie that has been created
                value:
                  id: 2
                  title: test-movie-1
                  length: 843
                  release_date: "1997-08-15"
                  category_id: 2

        '404':
          description: The movie was not found.
    put:
      tags:
      - "movie"
      description: Update a movie by movie_id
      responses:
        '204':
          description: The movie has been deleted
        '409':
          description: The movie was not found

    delete:
      tags:
      - "movie"
      description: Delete a movie by movie_id
      responses:
        '204':
          description: The movie has been deleted
        '409':
          description: The movie was not found
          
  /users/{user_id}/reviews/:
    parameters:
    - $ref: '#/components/parameters/user_id'
    get:
      tags:
      - "reviews"
      description: Get the list of all the reviews that were written by a user through his ID.
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              example:
              - id: 6981
                rating: 3
                comment: The movie is ok
                date: 20210322
              - id: 6982
                rating: 5
                comment: The movie is great
                date: 20210323
        '404':
          description: The user/endpoint was not found.
          
  /movies/{movie_id}/reviews/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "review"
      description: Get the list of a movie's reviews by movie_id
      responses:
        '200':
          description: List of reviews by movie_id
          content:
            application/json:
              example:
              - review_id: 5687
                rating: 3
                comment: The movie is ok
                date: 20210322
              - review_id: 5688
                rating: 5
                comment: The movie is great
                date: 20210323
  /movies/{movie_id}/reviews/{review_id}:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    - $ref: '#/components/parameters/review_id'
    get:
      tags:
      - "review"
      description: Get details of one review by movie_id and review_id
      responses:
        '200':
          description: Data of single review
          content:
            application/json:
              examples:
                user-example:
                  description: A review that has been created
                  value:
                    review_id: 5687
                    rating: 3
                    comment: The movie is ok
                    date: 20210322

        '404':
          description: The review was not found
    put:
      tags:
      - "review"
      description: Update a review by review_id
      responses:
        '204':
          description: The review has been deleted
        '409':
          description: The review was not found

    delete:
      tags:
      - "review"
      description: Delete a review by review_id
      responses:
        '204':
          description: The review has been deleted
        '409':
          description: The review was not found

  /categories/:
    get:
      tags:
      - "category"
      description: Get the list of manage categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              example:
              - category_id: 87675
                title: test-category-1
              - category_id: 87676
                title: test-category-2
    post:
      tags:
      - "category"
      description: Create a new category
      responses:
        '201':
          description: The category was created successfully
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: category_id must be integer and title must be string
        '409':
          description: Category already exists
        '415':
          description: Request content type must be JSON
      requestBody:
        description: JSON document that contains basic data for a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            example:
              category_id: 27521
              title: new-test-category-1
  /categories/{category_id}/:
    parameters:
    - $ref: '#/components/parameters/category_id'
    get:
      tags:
      - "category"
      description: Get details of one category by category_id
      responses:
        '200':
          description: Data of single category
          content:
            application/json:
              examples:
                category-example:
                  description: A category that has been created
                  value:
                    category_id: 87675
                    title: test-category-1

        '404':
          description: The category was not found
    put:
      tags:
      - "category"
      description: Update a category by category_id
      responses:
        '204':
          description: The category has been deleted
        '409':
          description: The category was not found

    delete:
      tags:
      - "category"
      description: Delete a category by category_id
      responses:
        '204':
          description: The category has been deleted
        '409':
          description: The category was not found

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email_address:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: ["Admin", "Basic User"]
      required:
      - username
      - email_address
      - password
      - role

    Review:
      type: object
      properties:
        rating:
          description: Review's rating in numerical form
          type: integer
          minimum: 1
          maximum: 5
        comment:
          description: Review's comment
          type: string
        date:
          description: Review's date as YYYYMMDD format
          type: string
          format: date
        author_id:
          description: Reference to the reviews's author (a user id)
          type: integer
        movie_id:
          description: Reference to the movie this review was written for
          type: integer
      required:
      - rating
      - comment
      - date
      - author_id
      - movie_id

    Movie:
      type: object
      properties:
        title:
          type: string
        director:
          type: string
        length:
          description: Movie's length in seconds
          type: integer
          minimum: 1
        release_date:
          description: Movie's release date in YYYY-MM-DD format
          type: string
          format: date
        category_id:
          description: Reference to the movie's category
          type: integer
      required:
      - title
      - director
      - length
      - release_date
      - category_id

    Category:
      type: object
      properties:
        title:
          description: Category's title
          type: string
      required:
      - title

  parameters:
    user_id:
      description: Select user by his unique ID.
      in: path
      name: user_id
      required: true
      schema:
        type: integer
    movie_id:
      description: Select movie by its unique ID.
      in: path
      name: movie_id
      required: true
      schema:
        type: integer
    review_id:
      description: Select review by its unique ID
      in: path
      name: review_id
      required: true
      schema:
        type: integer
    category_id:
      description: Select category by its unique ID
      in: path
      name: category_id
      required: true
      schema:
        type: integer