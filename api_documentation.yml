openapi: 3.0.3
info:
  title: Movie Review OpenAPI Documentation
  description: Documentation of the resources offered by the Movie Review API. Each of the URLs work either with or without the trailing slash, so it is up to you how you want to use them.
  version: 1.0.0

paths:
  /api/users/:
    get:
      tags:
      - "Users"
      description: Fetch a list of all users from the database.
      responses:
        '200':
          description: Successfully returned all users from the database.
          content:
            application/json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  self:
                    title: Get a list of all users
                    href: api/users/
                  moviereviewmeta:add-user:
                    method": POST
                    encoding": json
                    title": Create a new user
                    href: /api/users/
                items:
                  - id: 1
                    username: mario456
                    email_address: mario.lo@oulu.fi
                    role: Basic User
                    '@controls':
                      item:
                        title: Get a single user
                        href: /api/users/1/
                  - id: 2
                    username: jules
                    email_address: jules.fte@hotmail.com
                    role: Admin
                    '@controls':
                      item:
                        title: Get a single user
                        href: /api/users/2/
    post:
      tags:
      - "Users"
      description: Create a new user in the database.
      requestBody:
        description: JSON document that contains the username, email, password, and role to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: eric16
              email_address: ericloco@gmail.com
              password: e19h63
              role: Basic User
      responses:
        '201':
          description: The user was created successfully.
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. The username, email_address, password must be string and the role must be an enum of UserType ('Basic User' or 'Admin').
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.

  /api/users/{user_id}/:
    parameters:
    - $ref: '#/components/parameters/user_id'
    get:
      tags:
      - "Users"
      description: Fetch a single user from the database by using his ID.
      responses:
        '200':
          description: Successfully fetched data for the requested user.
          content:
            application/json:
              example:
                id: 1
                username: mario456
                email_address: mario.lo@oulu.fi
                role: Basic User
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all users
                    href: /api/users/
                  self:
                    title: Get a single user
                    href: /api/users/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a user
                    href: /api/users/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a user
                    href: /api/users/1/
                  moviereviewmeta:reviews-of-user:
                    title: Get a list of all reviews of this user
                    href: /api/users/1/reviews/
        '404':
          description: The user/endpoint was not found.
    put:
      tags:
      - "Users"
      description: Update a user by using its ID. Needs a JSON document that contains username, email and password to update user data.
      responses:
        '204':
          description: The user was updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: mario456
                email_address: new.mario.lo@oulu.fi
                password: e19h63
                role: Basic User
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '404':
          description: The user/endpoint was not found.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Users"
      description: Delete a user by using his ID.
      responses:
        '204':
          description: The user was deleted successfully.
        '404':
          description: The user/endpoint was not found.

  /api/movies/:
    get:
      tags:
      - "Movies"
      description: Fetch a list of all movies from the database.
      responses:
        '200':
          description: Successfully returned all movies from the database.
          content:
            application/json:
              example:
                '@namespaces':
                    moviereviewmeta:
                      name: /moviereviewmeta/link-relations/
                '@controls':
                  self:
                    title: Get a list of all movies
                    href: api/movies/
                  moviereviewmeta:add-movie:
                    method": POST
                    encoding": json
                    title": Create a new movie
                    href: /api/movies/
                items:
                - id: 1
                  title: Leon, the professional
                  director: Luc Besson
                  length: 6600
                  release_date: 1999-09-14
                  category_id: 2
                  '@controls':
                    item:
                      title: Get a single movie
                      href: /api/movies/1/
                - id: 2
                  title: Apocalypse now
                  director: Francis Copola
                  length: 8820
                  release_date: 1979-05-19
                  category_id: 3
                  '@controls':
                    item:
                      title: Get a single movie
                      href: /api/movies/2/
    post:
      tags:
      - "Movies"
      description: Create a new movie.
      requestBody:
        description: JSON document that contains the data for creating a new movie
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            example:
              title: Dune
              director: Denis Villeneuve
              length: 9360
              release_date: 2021-09-22
              category_id: 1
      responses:
        '201':
          description: The movie was created successfully.
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '415':
          description: Unsupported media type. The request content type must be JSON.

  /api/movies/{movie_id}/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "Movies"
      description: Fetch data from single movie by the ID.
      responses:
        '200':
          description: Successfully returned details of one movie.
          content:
            application/json:
              example:
                id: 1
                title: Leon, the professional
                director: Luc Besson
                length: 6600
                release_date: 1999-09-14
                category_id: 2
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all movies
                    href: /api/movies/
                  self:
                    title: Get a single user
                    href: /api/movies/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a movie
                    href: /api/movies/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a movie
                    href: /api/movies/1/
                  moviereviewmeta:reviews-of-movie:
                    title: Get a list of all reviews of this movie
                    href: /api/movies/1/reviews/
        '404':
          description: The movie was not found.
    put:
      tags:
      - "Movies"
      description: Update a movie by using its ID. Needs a JSON document that contains title, director, length, release date and category ID to update movie data.
      responses:
        '204':
          description: The movie has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
              example:
                title: Leon, the professional
                director: Luc Besson
                length: 8160
                release_date: 1999-09-14
                category_id: 2
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '404':
          description: The movie/endpoint was not found.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Movies"
      description: Delete a movie by movie_id
      responses:
        '204':
          description: The movie has been deleted
        '404':
          description: The movie was not found
        '409':
          description: Restrictions from the database e.g, foreign key constraints.

  /api/users/{user_id}/reviews/:
    parameters:
    - $ref: '#/components/parameters/user_id'
    get:
      tags:
      - "Reviews"
      description: Fetch the list of all the reviews that were written by a user through his ID.
      responses:
        '200':
          description: Successfully returned all reviews from the database written by one user.
          content:
            application/json:
              example:
                '@controls':
                  up:
                    title: Get a single user
                    href: /api/users/1/
                  self:
                    title: Get a list of all reviews of this user
                    href: /api/users/1/reviews/
                items:
                - id: 1
                  rating: 3
                  comment: The movie is ok
                  date: 2021-03-22
                  author_id: 2
                  movie_id: 1
                  '@controls':
                    item:
                      title: Get a single review
                      href: /api/movies/1/reviews/1
                - id: 2
                  rating: 5
                  comment: The movie is great
                  date: 2021-03-23
                  author_id: 2
                  movie_id: 2
                  '@controls':
                    item:
                      title: Get a single review
                      href: /api/movies/2/reviews/2
        '404':
          description: The user/endpoint was not found.

  /api/movies/{movie_id}/reviews/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "Reviews"
      description: Fetch the list of a movie's reviews by movie_id
      responses:
        '200':
          description: Successfully returned all reviews from the database.
          content:
            application/json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  up:
                    title: Get a single movie
                    href: /api/movies/1/
                  self:
                    title: Get a list of all reviews of this movie
                    href: /api/movies/1/reviews/
                  moviereviewmeta:add-review:
                    method: POST
                    encoding: json
                    title: Create a new review
                    href: /api/movies/1/reviews/
                  items:
                  - id: 3
                    rating:
                    comment: I didn't like the movie at all
                    date: 2021-03-25
                    author_id: 3
                    movie_id: 1
                    '@controls':
                      item:
                        title: Get a single review
                        href: /api/movies/1/reviews/3
                  - id: 4
                    rating: 5
                    comment: A masterpiece !
                    date: 2021-03-13
                    author_id: 1
                    movie_id: 1
                    '@controls':
                      item:
                        title: Get a single review
                        href: /api/movies/1/reviews/4
    post:
      tags:
      - "Reviews"
      description: Create a new review in the database.
      requestBody:
        description: JSON document that contains the rating score, the comment and the comment date to create a new review.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              rating: 1
              comment: A real disaster
              date: 2022-01-17
              author_id: 3
              movie_id: 3
      responses:
        '201':
          description: The review was created successfully.
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. The rating score must be an integer, the comment must be a string, and the comment date must be a string with YYYY-MM-DD.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
  /api/movies/{movie_id}/reviews/{review_id}:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    - $ref: '#/components/parameters/review_id'
    get:
      tags:
      - "Reviews"
      description: Fetch details of one review by movie_id and review_id
      responses:
        '200':
          description: Successfully returned details of one review.
          content:
            application/json:
              example:
                id: 1
                rating: 3
                comment: The movie is ok
                date: 2021-03-22
                author_id: 2
                movie_id: 1
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all reviews for this movie
                    href: /api/movies/1/reviews/
                  self:
                    title: Get a single review
                    href: /api/movies/1/reviews/1
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a review
                    href: /api/movies/1/reviews/1
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a user
                    href: /api/movies/1/reviews/1
        '404':
          description: The review was not found
    put:
      tags:
      - "Reviews"
      description: Update a review by its ID. Needs a JSON document that contains rating score, comment, comment date, author ID and movie ID to update review data.
      responses:
        '204':
          description: The review has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              example:
                rating: 4
                comment: The movie is ok, but I changed my mind, it's pretty good
                date: 2021-03-23
                author_id: 2
                movie_id: 1
        '400':
          description: Request doesn't match the JSON schema. The rating score must be an integer, the comment must be a string, and the comment date must be a string with YYYY-MM-DD.
        '404':
          description: The review/endpoint was not found.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.

    delete:
      tags:
      - "Reviews"
      description: Delete a review by review_id
      responses:
        '204':
          description: The review has been deleted
        '409':
          description: The review was not found

  /api/categories/:
    get:
      tags:
      - "Categories"
      description: Fetch a list of all categories from the database.
      responses:
        '200':
          description: Successfully returned all categories from the database.
          content:
            application/json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  self:
                    title: Get a list of all categories
                    href: api/categories/
                  moviereviewmeta:add-category:
                    method": POST
                    encoding": json
                    title": Create a new category
                    href: /api/categories/
                items:
                - id: 1
                  title: Science-Fiction
                  '@controls':
                    title: Get a single category
                    href: /apu/categories/1/
                - id: 2
                  title: Thriller
                  '@controls':
                    title: Get a single category
                    href: /apu/categories/2/
    post:
      tags:
      - "Categories"
      description: Create a new category
      requestBody:
        description: JSON document that contains basic data for a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            example:
              title: War
      responses:
        '201':
          description: The category was created successfully
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: category_id must be integer and title must be string
        '409':
          description: Category already exists
        '415':
          description: Request content type must be JSON

  /api/categories/{category_id}/:
    parameters:
    - $ref: '#/components/parameters/category_id'
    get:
      tags:
      - "Categories"
      description: Fetch details of one category by category_id
      responses:
        '200':
          description: Successfully returned details of one category.
          content:
            application/json:
              example:
                id: 1
                title: Science-Fiction
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all categories
                    href: /api/categories/
                  self:
                    title: Get a single category
                    href: /api/categories/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a category
                    href: /api/users/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a user
                    href: /api/users/1/
        '404':
          description: The category was not found
    put:
      tags:
      - "Categories"
      description: Update a category by its ID. Needs a JSON document that contains title to update movie data.
      responses:
        '204':
          description: The category has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                title: SF
        '400':
          description: Request doesn't match the JSON schema. Title must be a string
        '404':
          description: The category/endpoint was not found.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Categories"
      description: Delete a category by category_id
      responses:
        '204':
          description: The category has been deleted
        '404':
          description: The category was not found
        '409':
          description: Restrictions from the database e.g., foreign key constraints.

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        email_address:
          type: string
          format: email
        password:
            type: string
            minLength: 6
        role:
          type: string
          enum: [Admin, Basic User]
      required:
      - username
      - email_address
      - password
      - role

    Review:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        date:
          type: string
          format: date-time
        author_id:
          type: integer
        movie_id:
          type: integer
      required:
      - rating
      - comment
      - date
      - author_id
      - movie_id

    Movie:
      type: object
      properties:
        title:
          type: string
        director:
          type: string
        length:
          type: integer
          minimum: 1
          description: Movie's length in seconds
        release_date:
          type: string
          format: date
          description: Movie's release date in YYYY-MM-DD format
        category_id:
          type: integer
      required:
      - title
      - director
      - length
      - release_date
      - category_id

    Category:
      type: object
      properties:
        title:
          type: string
      required:
      - title

  parameters:
    user_id:
      name: user_id
      in: path
      description: Used for selecting a user by his unique ID.
      required: true
      schema:
        type: integer

    movie_id:
      name: movie_id
      in: path
      description: Used for selecting a movie by its unique ID.
      required: true
      schema:
        type: integer

    review_id:
      name: review_id
      in: path
      description: Used for selecting a review by its unique ID.
      required: true
      schema:
        type: integer

    category_id:
      name: category_id
      in: path
      description: Used for selecting a category by its unique ID.
      required: true
      schema:
        type: integer