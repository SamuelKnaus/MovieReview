openapi: 3.0.3
info:
  title: Movie Review OpenAPI Documentation
  description: Documentation of the resources offered by the Movie Review API. Each of the URLs work either with or without the trailing slash, so it is up to you how you want to use them.
  version: 1.0.0

paths:
  /api/users/:
    get:
      tags:
      - "Users"
      description: Fetch a list of all users from the database.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successfully returned all users from the database.
          content:
            application/vnd.mason+json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  up:
                    title: Get the api documentation root
                    href: /
                  self:
                    title: Get a list of all users
                    href: /api/users/
                  moviereviewmeta:add-user:
                    method: POST
                    encoding: json
                    title: Create a new user
                    schema:
                      type: object
                      required:
                        - username
                        - email_address
                        - password
                        - role
                      properties:
                        username:
                          title: Username
                          description: The username of the user
                          type: string
                        email_address:
                          title: Email address
                          description: The email address of the user
                          type: string
                          format: email
                        password:
                          title: Password
                          description: The password of the user
                          type: string
                          minLength: 6
                        role:
                          title: Role
                          description: The role of the user
                          type: string
                          enum:
                            - Admin
                            - Basic User
                    href: /api/users/
                items:
                  - username: dummyGuy
                    email_address: red.unicorn@gmail.com
                    role: Basic User
                    '@controls':
                      self:
                        title: Get a single user
                        href: /api/users/dummyGuy/
                  - username: dummyAdmin
                    email_address: omnipotent.pencil@yahoo.com
                    role: Admin
                    '@controls':
                      self:
                        title: Get a single user
                        href: /api/users/dummyAdmin/
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
    post:
      tags:
      - "Users"
      description: Create a new user in the database.
      requestBody:
        description: JSON document that contains the username, email, password, and role to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: eric16
              email_address: ericloco@gmail.com
              password: e19h63
              role: Basic User
      responses:
        '201':
          description: The user was created successfully.
          headers:
            Location:
              description: URI of the new user
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. The username, email_address, password must be string and the role must be an enum of UserType ('Basic User' or 'Admin').
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.

  /api/users/{username}/:
    parameters:
    - $ref: '#/components/parameters/username'
    get:
      tags:
      - "Users"
      description: Fetch a single user from the database by using his ID.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successfully fetched data for the requested user.
          content:
            application/vnd.mason+json:
              example:
                username: dummyGuy
                email_address: red.unicorn@gmail.com
                role: Basic User
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all users
                    href: /api/users/
                  self:
                    title: Get a single user
                    href: /api/users/dummyGuy/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a user
                    schema:
                      type: object
                      required:
                        - username
                        - email_address
                        - password
                        - role
                      properties:
                        username:
                          title: Username
                          description: The username of the user
                          type: string
                        email_address:
                          title: Email address
                          description: The email address of the user
                          type: string
                          format: email
                        password:
                          title: Password
                          description: The password of the user
                          type: string
                          minLength: 6
                        role:
                          title: Role
                          description: The role of the user
                          type: string
                          enum:
                            - Admin
                            - Basic User
                    href: /api/users/dummyGuy/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a user
                    href: /api/users/dummyGuy/
                  moviereviewmeta:reviews-of-user:
                    title: Get a list of all reviews of this user
                    href: /api/users/dummyGuy/reviews/
        '401':
          description: The authentication failed.
        '403':
          description: The username of the currently authenticated user neither matches the url parameter nor does he have the role 'Admin'.
        '404':
          description: The user/endpoint was not found.
    put:
      tags:
      - "Users"
      description: Update a user by using its ID.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains the username, email, password, and role to update an user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              username: mario456
              email_address: new.mario.lo@oulu.fi
              password: e19h63
              role: Basic User
      responses:
        '204':
          description: The user was updated successfully.
          headers:
            Location:
              description: URI of the updated user
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '401':
          description: The authentication failed.
        '403':
          description: The username of the currently authenticated user neither matches the url parameter nor does he have the role 'Admin'.
        '404':
          description: The user/endpoint was not found.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Users"
      description: Delete a user by using his ID.
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: The user was deleted successfully.
        '401':
          description: The authentication failed.
        '403':
          description: The username of the currently authenticated user neither matches the url parameter nor does he have the role 'Admin'.
        '404':
          description: The user/endpoint was not found.

  /api/movies/:
    get:
      tags:
      - "Movies"
      description: Fetch a list of all movies from the database.
      responses:
        '200':
          description: Successfully returned all movies from the database.
          content:
            application/vnd.mason+json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  up:
                    title: Get the api documentation root
                    href: /
                  self:
                    title: Get a list of all movies
                    href: /api/movies/
                  moviereviewmeta:add-movie:
                    method: POST
                    encoding: json
                    title: Create a new movie
                    schema:
                      type: object
                      required:
                        - title
                        - director
                        - length
                        - release_date
                        - category_id
                      properties:
                        title:
                          title: Title
                          description: Movie's title
                          type: string
                        director:
                          title: Director
                          description: The name of the director of the movie
                          type: string
                        length:
                          title: Length
                          description: The length of the movie in seconds
                          type: integer
                          minimum: 1
                        release_date:
                          title: Release Date
                          description: The release date of the movie
                          type: string
                          format: date
                        category_id:
                          title: Category ID
                          description: The id of the movie's category which acts as foreign key
                          type: integer
                    href: /api/movies/
                items:
                  - id: 1
                    title: 'Léon: The professional'
                    director: Luc Besson
                    length: 6600
                    release_date: '1999-09-14'
                    category_id: 1
                    '@controls':
                      self:
                        title: Get a single movie
                        href: /api/movies/1/
                  - id: 2
                    title: Apocalypse Now
                    director: Francis Coppola
                    length: 7380
                    release_date: '1997-08-15'
                    category_id: 2
                    '@controls':
                      self:
                        title: Get a single movie
                        href: /api/movies/2/
    post:
      tags:
      - "Movies"
      description: Create a new movie.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains the data for creating a new movie
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            example:
              title: Dune
              director: Denis Villeneuve
              length: 9360
              release_date: "2021-09-22"
              category_id: 1
      responses:
        '201':
          description: The movie was created successfully.
          headers:
            Location:
              description: URI of the new movie
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be JSON.

  /api/movies/{movie_id}/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "Movies"
      description: Fetch data from single movie by the ID.
      responses:
        '200':
          description: Successfully returned details of one movie.
          content:
            application/vnd.mason+json:
              example:
                id: 1
                title: 'Léon: The professional'
                director: Luc Besson
                length: 6600
                release_date: '1999-09-14'
                category_id: 1
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all movies
                    href: /api/movies/
                  self:
                    title: Get a single movie
                    href: /api/movies/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a movie
                    schema:
                      type: object
                      required:
                        - title
                        - director
                        - length
                        - release_date
                        - category_id
                      properties:
                        title:
                          title: Title
                          description: Movie's title
                          type: string
                        director:
                          title: Director
                          description: The name of the director of the movie
                          type: string
                        length:
                          title: Length
                          description: The length of the movie in seconds
                          type: integer
                          minimum: 1
                        release_date:
                          title: Release Date
                          description: The release date of the movie
                          type: string
                          format: date
                        category_id:
                          title: Category ID
                          description: The id of the movie's category which acts as foreign key
                          type: integer
                    href: /api/movies/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a movie
                    href: /api/movies/1/
                  moviereviewmeta:reviews-for-movie:
                    title: Get a list of all reviews for this movie
                    href: /api/movies/1/reviews/
        '404':
          description: The movie was not found.
    put:
      tags:
      - "Movies"
      description: Update a movie by using its ID.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains title, director, length, release date and category ID to update movie data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
            example:
              title: Leon, the professional
              director: Luc Besson
              length: 8160
              release_date: "1999-09-14"
              category_id: 2
      responses:
        '204':
          description: The movie has been updated
          headers:
            Location:
              description: URI of the updated movie
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. For exanmple title, director must be string, length and category_id must be integers and releas_date must be string with YYYY-MM-DD format.
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '404':
          description: The movie/endpoint was not found.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Movies"
      description: Delete a movie by movie_id
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: The movie has been deleted
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '404':
          description: The movie was not found

  /api/users/{username}/reviews/:
    parameters:
    - $ref: '#/components/parameters/username'
    get:
      tags:
      - "Reviews"
      description: Fetch the list of all the reviews that were written by a user through his ID.
      responses:
        '200':
          description: Successfully returned all reviews from the database written by one user.
          content:
            application/vnd.mason+json:
              example:
                '@controls':
                  author:
                    title: Get a single user
                    href: /api/users/dummyGuy/
                  self:
                    title: Get a list of all reviews of this user
                    href: /api/users/dummyGuy/reviews/
                items:
                  - id: 1
                    rating: 4
                    comment: The film is almost perfect but I don’t like Natalie Portman
                    date: '2016-09-10T00:00:00.000000Z'
                    author: dummyGuy
                    movie_id: 1
                    '@controls':
                      self:
                        title: Get a single review
                        href: /api/movies/1/reviews/1/
                  - id: 2
                    rating: 5
                    comment: Such a masterpiece! I love helicopters
                    date: '2018-05-23T00:00:00.000000Z'
                    author: dummyGuy
                    movie_id: 2
                    '@controls':
                      self:
                        title: Get a single review
                        href: /api/movies/2/reviews/2/
        '404':
          description: The user/endpoint was not found.

  /api/movies/{movie_id}/reviews/:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    get:
      tags:
      - "Reviews"
      description: Fetch the list of a movie's reviews by movie_id
      responses:
        '200':
          description: Successfully returned all reviews from the database.
          content:
            application/vnd.mason+json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  up:
                    title: Get a single movie
                    href: /api/movies/4/
                  self:
                    title: Get a list of all reviews for this movie
                    href: /api/movies/4/reviews/
                  moviereviewmeta:add-review:
                    method: POST
                    encoding: json
                    title: Create a new review
                    schema:
                      type: object
                      required:
                        - rating
                        - comment
                        - date
                        - author
                        - movie_id
                      properties:
                        rating:
                          title: Rating
                          description: The rating of the movie (from 1 to 5)
                          type: integer
                          minimum: 1
                          maximum: 5
                        comment:
                          title: Comment
                          description: A textual comment
                          type: string
                        date:
                          title: Date
                          description: The date on which the comment was written
                          type: string
                          format: date-time
                        author:
                          title: Author
                          description: The username of the user which created the review
                          type: string
                        movie_id:
                          title: Movie ID
                          description: >-
                            The id of the movie this review was created for which acts as
                            foreign key
                          type: integer
                    href: /api/movies/4/reviews/
                items:
                  - id: 4
                    rating: 4
                    comment: >-
                      Will melt the iciest of hearts, the best animated film of 2013 by a mile
                      and one of Disney's best in recent years.
                    date: '2014-03-15T00:00:00.000000Z'
                    author: grantorinohurricane
                    movie_id: 4
                    '@controls':
                      self:
                        title: Get a single review
                        href: /api/movies/4/reviews/4/
                  - id: 5
                    rating: 5
                    comment: >-
                      My girls totally love it! Been watching with them every weekend now (seems
                      boring now), yet my kids every time feel rejuvenated after watching it.
                    date: '2015-05-31T00:00:00.000000Z'
                    author: lightningbasketball
                    movie_id: 4
                    '@controls':
                      self:
                        title: Get a single review
                        href: /api/movies/4/reviews/5/
        '404':
          description: The movie/endpoint was not found.
    post:
      tags:
      - "Reviews"
      description: Create a new review for a movie.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains the rating score, the comment and the comment date to create a new review.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              rating: 1
              comment: A real disaster
              date: "2022-01-17T14:22:45Z"
              author: "dummyGuy"
              movie_id: 3
      responses:
        '201':
          description: The review was created successfully.
          headers:
            Location:
              description: URI of the new review
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. The rating score must be an integer, the comment must be a string, and the comment date must be a string with YYYY-MM-DD.
        '401':
          description: The authentication failed.
        '403':
          description: The user is neither the author of the review nor does he have the role 'Admin'.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
  /api/movies/{movie_id}/reviews/{review_id}:
    parameters:
    - $ref: '#/components/parameters/movie_id'
    - $ref: '#/components/parameters/review_id'
    get:
      tags:
      - "Reviews"
      description: Fetch details of one review by movie_id and review_id
      responses:
        '200':
          description: Successfully returned details of one review.
          content:
            application/vnd.mason+json:
              example:
                id: 1
                rating: 4
                comment: The film is almost perfect but I don’t like Natalie Portman
                date: '2016-09-10T00:00:00.000000Z'
                author: dummyGuy
                movie_id: 1
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all reviews for this movie
                    href: /api/movies/1/reviews/
                  self:
                    title: Get a single review
                    href: /api/movies/1/reviews/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a review
                    schema:
                      type: object
                      required:
                        - rating
                        - comment
                        - date
                        - author
                        - movie_id
                      properties:
                        rating:
                          title: Rating
                          description: The rating of the movie (from 1 to 5)
                          type: integer
                          minimum: 1
                          maximum: 5
                        comment:
                          title: Comment
                          description: A textual comment
                          type: string
                        date:
                          title: Date
                          description: The date on which the comment was written
                          type: string
                          format: date-time
                        author:
                          title: Author
                          description: The username of the user which created the review
                          type: string
                        movie_id:
                          title: Movie ID
                          description: >-
                            The id of the movie this review was created for which acts as
                            foreign key
                          type: integer
                    href: /api/movies/1/reviews/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a review
                    href: /api/movies/1/reviews/1/
        '404':
          description: The review/endpoint was not found
    put:
      tags:
      - "Reviews"
      description: Update a review by its ID
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains rating score, comment, comment date, author ID and movie ID to update review data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              rating: 4
              comment: The movie is ok, but I changed my mind, it's pretty good
              date: "2021-07-03T04:08:05Z"
              author: "dummyGuy"
              movie_id: 1
      responses:
        '204':
          description: The review has been updated.
          headers:
            Location:
              description: URI of the updatedreview
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. The rating score must be an integer, the comment must be a string, and the comment date must be a string with YYYY-MM-DD.
        '401':
          description: The authentication failed.
        '403':
          description: The user is neither the author of the review nor does he have the role 'Admin'.
        '404':
          description: The review/endpoint was not found.
        '409':
          description: Restrictions from the database e.g., foreign key constraints.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.

    delete:
      tags:
      - "Reviews"
      description: Delete a review by its ID.
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: The review has been deleted.
        '401':
          description: The authentication failed.
        '403':
          description: The user is neither the author of the review nor does he have the role 'Admin'.
        '404':
          description: The review was not found

  /api/categories/:
    get:
      tags:
      - "Categories"
      description: Fetch a list of all categories from the database.
      responses:
        '200':
          description: Successfully returned all categories from the database.
          content:
            application/vnd.mason+json:
              example:
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  up:
                    title: Get the api documentation root
                    href: /
                  self:
                    title: Get a list of all categories
                    href: /api/categories/
                  moviereviewmeta:add-category:
                    method: POST
                    encoding: json
                    title: Create a new category
                    schema:
                      type: object
                      required:
                        - title
                      properties:
                        title:
                          title: Title
                          description: The name of the category
                          type: string
                    href: /api/categories/
                items:
                  - id: 1
                    title: Thriller
                    '@controls':
                      self:
                        title: Get a single category
                        href: /api/categories/1/
                  - id: 2
                    title: War
                    '@controls':
                      self:
                        title: Get a single category
                        href: /api/categories/2/
    post:
      tags:
      - "Categories"
      description: Create a new category
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains basic data for a new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            example:
              title: War
      responses:
        '201':
          description: The category was created successfully
          headers:
            Location:
              description: URI of the new category
              schema:
                type: string
        '400':
          description: Bad Request (Request does not match the JSON schema).
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '415':
          description: Request content type must be JSON

  /api/categories/{category_id}/:
    parameters:
    - $ref: '#/components/parameters/category_id'
    get:
      tags:
      - "Categories"
      description: Fetch details of one category by category_id
      responses:
        '200':
          description: Successfully returned details of one category.
          content:
            application/vnd.mason+json:
              example:
                id: 1
                title: Thriller
                '@namespaces':
                  moviereviewmeta:
                    name: /moviereviewmeta/link-relations/
                '@controls':
                  collection:
                    title: Get a list of all categories
                    href: /api/categories/
                  self:
                    title: Get a single category
                    href: /api/categories/1/
                  edit:
                    method: PUT
                    encoding: json
                    title: Update a category
                    schema:
                      type: object
                      required:
                        - title
                      properties:
                        title:
                          title: Title
                          description: The name of the category
                          type: string
                    href: /api/categories/1/
                  moviereviewmeta:delete:
                    method: DELETE
                    title: Delete a category
                    href: /api/categories/1/
        '404':
          description: The category was not found
    put:
      tags:
      - "Categories"
      description: Update a category by its ID.
      security:
        - ApiKeyAuth: []
      requestBody:
        description: JSON document that contains title to update category data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            example:
              title: SciFi
      responses:
        '204':
          description: The category has been updated
          headers:
            Location:
              description: URI of the updated category
              schema:
                type: string
        '400':
          description: Request doesn't match the JSON schema. Title must be a string
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '404':
          description: The category/endpoint was not found.
        '415':
          description: Unsupported media type. The request content type must be of type JSON.
    delete:
      tags:
      - "Categories"
      description: Delete a category by category_id
      security:
        - ApiKeyAuth: []
      responses:
        '204':
          description: The category has been deleted
        '401':
          description: The authentication failed.
        '403':
          description: The user does not have the required role 'Admin'.
        '404':
          description: The category was not found
        '409':
          description: Restrictions from the database e.g., foreign key constraints.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    User:
      type: object
      properties:
        username:
          description: The username of the user
          type: string
        email_address:
          description: The email address of the user
          type: string
          format: email
        password:
          description: The password of the user
          type: string
          minLength: 6
        role:
          description: The role of the user which can either be "basic user" or "admin"
          type: string
          enum: [ Admin, Basic User ]
      required:
      - username
      - email_address
      - password
      - role

    Review:
      type: object
      properties:
        rating:
          description: The rating of the movie (from 1 to 5)
          type: integer
          minimum: 1
          maximum: 5
        comment:
          description: A textual comment
          type: string
        date:
          description: The date and time when the review was written
          type: string
          format: date-time
        author:
          description: The username of the user which created the review
          type: string
        movie_id:
          description: The id of the movie this review was created for which acts as foreign key
          type: integer
      required:
      - rating
      - comment
      - date
      - author
      - movie_id

    Movie:
      type: object
      properties:
        title:
          description: The title of the movie
          type: string
        director:
          description: The director of the movie
          type: string
        length:
          description: The length of the movie in seconds
          type: integer
          minimum: 1
        release_date:
          description: The release date of the movie
          type: string
          format: date
        category_id:
          description: The id of the movie's category which acts as foreign key
          type: integer
      required:
      - title
      - director
      - length
      - release_date
      - category_id

    Category:
      type: object
      properties:
        title:
          type: string
      required:
      - title

  parameters:
    username:
      name: username
      in: path
      description: Used for selecting a user by his unique name.
      required: true
      schema:
        type: string

    movie_id:
      name: movie_id
      in: path
      description: Used for selecting a movie by its unique ID.
      required: true
      schema:
        type: integer

    review_id:
      name: review_id
      in: path
      description: Used for selecting a review by its unique ID.
      required: true
      schema:
        type: integer

    category_id:
      name: category_id
      in: path
      description: Used for selecting a category by its unique ID.
      required: true
      schema:
        type: integer